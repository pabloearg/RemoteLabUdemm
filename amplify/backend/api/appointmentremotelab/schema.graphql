type User @model 
  @auth(rules: [{ allow: owner, operations: [create, delete, update] }]) 
  @key(fields: ["email"], name: "userByEmail", queryField: "userByEmail") {
  email: String!
  firstName: String!
  lastName: String!
  filedId: String
  quantityViolations: Int
  cleanDate: AWSDate
  type: String!  
  subjects: [String]
  appointments: [AppointmentLocal]
}

type AppointmentLocal {
  experimentId: String
  uuid: String
  hour: AWSTime
  day: AWSDate
}

type Appointment @model 
  @key(fields: ["id","experimentId","day","hour"], name: "appointmentByDateAndExperiment",  queryField: "appointmentByDateAndExperiment") 
  @key(fields: ["day","experimentId"], name: "appointmentByDatAndExperiment",  queryField: "appointmentByDayAndExperiment") 
  @key(fields: ["uuid"],name: "appointmentByUuid",  queryField: "appointmentByUuid") 
  @key( fields: ["email"]) {
  id:ID!
  day: String
  hour: String
  uuid: String
  email: String
  firstName: String
  lastName: String
  experimentId: String
}

type Subject @model 
  @key(name: "subjectById", fields: ["id"], queryField: "subjectById") {
  id: ID!
  name: String!
  students: [Student]
  periodBlock: String!
  university: String!
}

type Student {
  email: String
  firstName: String
  lastName: String
}

type Config @model{
  experiments: [Experiment]
}

type Experiment {
  uuid: ID!
  name: String!
  iconUrl: String
}